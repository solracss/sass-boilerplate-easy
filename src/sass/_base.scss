@use "sass:math";
@use "sass:map";

// funcrions
@function remSize($size) {
	$remSize: math.div($size, 16px);
	@return #{$remSize}rem;
}

// mixins
@mixin setHslaColor($property, $hslcolor, $alpha: 1) {
	#{$property}: hsla(
		hue($hslcolor),
		saturation($hslcolor),
		lightness($hslcolor),
		$alpha
	);
}

@mixin pseudo($type: before, $pos: absolute, $content: "") {
	position: relative;
	&::#{$type} {
		content: $content;
		position: $pos;
		@content;
	}
}

$breakpoints: (
	small: remSize(640px),
	medium: remSize(768px),
	large: remSize(1024px),
);

@mixin media($size) {
	@if map.has-key($breakpoints, $size) {
		$breakpoint: map-get($breakpoints, $size);
		@media screen and (min-width: $breakpoint) {
			@content;
		}
	} @else {
		@error 'the keyword #{$size} is not in the $breakpoints map';
	}
}

// colors
$clr-neutral-100: hsl(0, 0%, 100%);
$clr-neutral-200: hsl(0, 0%, 81%);

$clr-primary-200: hsl(210, 46%, 95%);
$clr-primary-400: hsl(217, 19%, 35%);
$clr-primary-600: hsl(219, 29%, 14%);

$clr-accent-300: hsla(264, 82%, 70%);
$clr-accent-400: hsl(263, 55%, 52%);

$colors: (
	"neutral": (
		"100": $clr-neutral-100,
	),
	"primary": (
		"200": $clr-primary-200,
		"400": $clr-primary-400,
		"600": $clr-primary-600,
	),
	"accent": (
		"400": $clr-accent-400,
	),
);

// typography
$ff-base: "set your font here";

$fw-regular: 400;
$fw-bold: 900;

$fs-11: 0.6875rem;
$fs-12: 0.75rem;
$fs-13: 0.8125rem;
$fs-14: 0.875rem;
$fs-16: 1rem;
$fs-20: 1.25rem;
$fs-24: 1.5rem;
$fs-28: 1.75rem;
$fs-32: 2rem;

// utility classes
@each $color, $shade-map in $colors {
	@each $shade, $value in $shade-map {
		.clr-#{$color}-#{$shade} {
			color: $value;
		}
		.bg-#{$color}-#{$shade} {
			background-color: $value;
		}
	}
}
